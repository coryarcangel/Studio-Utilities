// enable double-clicking from Mac Finder or Windows Explorer// this command only works in Photoshop CS2 and higher#target photoshop// bring application forward for double-click eventsapp.bringToFront();///////////////////////////////////////////////////////////////////////////////// main - main function///////////////////////////////////////////////////////////////////////////////function main() {	// user settings	var prefs = new Object();	prefs.sourceFolder         = '~';  // default browse location (default: '~')	prefs.removeFileExtensions = false; // remove filename extensions for imported layers (default: true)	prefs.savePrompt           = false; // display save prompt after import is complete (default: false)	prefs.closeAfterSave       = false; // close import document after saving (default: false)	// prompt for source folder	var sourceFolder = Folder.selectDialog('Please select the folder to be imported:', Folder(prefs.sourceFolder));	// ensure the source folder is valid	if (!sourceFolder) {		return;	}	else if (!sourceFolder.exists) {		alert('Source folder not found.', 'Script Stopped', true);		return;	}	// add source folder to user settings	prefs.sourceFolder = sourceFolder;	// get a list of files	var fileArray = getFiles(prefs.sourceFolder);	// if files were found, proceed with import	if (fileArray.length) {		importFolderAsLayers(fileArray, prefs);	}	// otherwise, diplay message	else {		alert("The selected folder doesn't contain any recognized images.", 'No Files Found', false);	}}///////////////////////////////////////////////////////////////////////////////// getFiles - get all files within the specified source///////////////////////////////////////////////////////////////////////////////function getFiles(sourceFolder) {	// declare local variables	var fileArray = new Array();	var extRE = /\.(?:tif|svg|tiff)$/i;	// get all files in source folder	var docs = sourceFolder.getFiles();	var len = docs.length;	for (var i = 0; i < len; i++) {		var doc = docs[i];		// only match files (not folders)		if (doc instanceof File) {			// store all recognized files into an array			var docName = doc.name;			if (docName.match(extRE)) {				fileArray.push(doc);			}		}	}	// return file array	return fileArray;}///////////////////////////////////////////////////////////////////////////////// importFolderAsLayers - imports a folder of images as named layers///////////////////////////////////////////////////////////////////////////////function importFolderAsLayers(fileArray, prefs) {	// create a new document    //henry note: correct this once on the media server    //var thisFile = new File($.fileName);     //var newDoc = new File(thisFile.path+"/scanner-panels-template-empty.psb")    var thisFile = new File($.fileName);     var fold = new Folder(thisFile.path);    var theFile = new File(fold.getFiles("scanner-panels-template-empty.psb"))    var newDoc = open(theFile);	//var newDoc = open(new File("scanner-panels-template-empty-copy.psb"));	var newLayer = newDoc.activeLayer;    	// loop through all files in the source folder	for (var i = 0; i < fileArray.length; i++) {		// open document		var doc = open(fileArray[i]);		// get document name (and remove file extension)		var name = doc.name;        var isSvg = name.indexOf("svg")>-1;		if (prefs.removeFileExtensions) {			name = name.replace(/(?:\.[^.]*$|$)/, '');		}   		// convert to RGB; convert to 8-bpc; merge visible		doc.changeMode(ChangeMode.RGB);		doc.bitsPerChannel = BitsPerChannelType.EIGHT;		doc.artLayers.add();		doc.mergeVisibleLayers();		// rename layer; duplicate to new document		var layer = doc.activeLayer;		layer.name = name;        if(layer.name.indexOf("svg")<0){            layer.rotate(-90);            }        var newest = layer.duplicate(newDoc, ElementPlacement.PLACEATEND);        if(doc.width<doc.height){            //doc.layers[0].rotate(-90);            var opts = new TiffSaveOptions();            opts.layers = false;                        //doc.save();        }		// close imported document		doc.close(SaveOptions.DONOTSAVECHANGES);        	}		// delete empty layer; reveal and trim to fit all layers	newLayer.remove();	//newDoc.revealAll();    var svg_layer ;    var res = app.activeDocument.resolution;    for(var i=0;i<app.activeDocument.layers.length;i++){        if(app.activeDocument.layers[i].name.indexOf("svg")>-1){           svg_layer = app.activeDocument.layers[i];            }        }    svg_layer.move(app.activeDocument, ElementPlacement.PLACEATEND );    var inch = UnitValue(res+"px");    MoveLayerTo(svg_layer,0,0);    var svgScale = UnitValue("21 in")/svg_layer.bounds[2];    svg_layer.resize(svgScale*100,svgScale*100,AnchorPosition.TOPLEFT);        var height = svg_layer.bounds[3];    MoveLayerTo(svg_layer,res*15,(res*108-svg_layer.bounds[3]));    //svg_layer.applyOffset(inch*15,inch*Math.abs(108-svg_layer.bounds[3]),OffsetUndefinedAreas.WRAPAROUND);    //newDoc.layers[0].applyOffset(0,1110,OffsetUndefinedAreas.WRAPAROUND);    for(var i=0;i<3;i++){        MoveLayerTo(app.activeDocument.layers[i],0,0);        var scaleFactor = UnitValue("39 in")/(app.activeDocument.layers[i].bounds[3]);        $.writeln((app.activeDocument.layers[i].bounds[2]-app.activeDocument.layers[i].bounds[0]));        //if(activeDocument.layers[i].width<activeDocument.layers[3].height){            //}        app.activeDocument.layers[i].resize(scaleFactor*100,scaleFactor*100,AnchorPosition.TOPLEFT);        app.activeDocument.layers[i].applyOffset(UnitValue("0in"),UnitValue(app.activeDocument.resolution+"px")*i*36,OffsetUndefinedAreas.WRAPAROUND);    }    var doc = app.activeDocument;    var res = doc.resolution;    var margin = res*1.5;    for(var i=0;i<3;i++){        doc.activeLayer = doc.layers[i];        var selRegion = Array(Array(margin, margin+(36*i*res)),Array(doc.width-margin,margin+(36*i*res)),       Array(doc.width-margin, margin+(36*(i+1)*res)),       Array(margin, margin+36*(i+1)*res),       Array(margin,margin+(36*i*res)));        doc.selection.select(selRegion);        makeLayerMask('RvlS');    }    app.activeDocument.layers[3].applyStyle("embosser");    svg_layer.move(app.activeDocument, ElementPlacement.PLACEATBEGINNING );	// save the final document	if (prefs.savePrompt) {		// PSD save options		var saveOptions = new PhotoshopSaveOptions();		saveOptions.layers = true;		saveOptions.embedColorProfile = true;		// prompt for save name and location		var saveFile = File.saveDialog('Save the new document as:');		if (saveFile) {			newDoc.saveAs("arranged-scan-"+saveFile, saveOptions, false, Extension.LOWERCASE);		}		// close import document		if (prefs.closeAfterSave) {			newDoc.close(SaveOptions.DONOTSAVECHANGES);		}	}}///////////////////////////////////////////////////////////////////////////////// isCorrectVersion - check for Adobe Photoshop CS2 (v9) or higher///////////////////////////////////////////////////////////////////////////////function isCorrectVersion() {	if (parseInt(version, 10) >= 9) {		return true;	}	else {		alert('This script requires Adobe Photoshop CS2 or higher.', 'Wrong Version', false);		return false;	}}///////////////////////////////////////////////////////////////////////////////// showError - display error message if something goes wrong///////////////////////////////////////////////////////////////////////////////function showError(err) {	if (confirm('An unknown error has occurred.\n' +		'Would you like to see more information?', true, 'Unknown Error')) {			alert(err + ': on line ' + err.line, 'Script Error', true);	}}// test initial conditions prior to running main functionif (isCorrectVersion()) {	// remember ruler units; switch to pixels	var originalRulerUnits = preferences.rulerUnits;	preferences.rulerUnits = Units.PIXELS;	try {		main();	}	catch(e) {		// don't report error on user cancel		if (e.number != 8007) {			showError(e);		}	}	// restore original ruler unit	preferences.rulerUnits = originalRulerUnits;}function MoveLayerTo(fLayer,fX,fY) {  var Position = fLayer.bounds;  Position[0] = fX - Position[0];  Position[1] = fY - Position[1];  fLayer.translate(-Position[0],-Position[1]);}function hasLayerMask() {    var ref = new ActionReference();    ref.putEnumerated(charIDToTypeID("Lyr "), charIDToTypeID("Ordn"), charIDToTypeID("Trgt"));    var desc = executeActionGet(ref);    return desc.hasKey(charIDToTypeID("UsrM"));}function deleteMask() {    var desc523 = new ActionDescriptor();        var ref325 = new ActionReference();        ref325.putEnumerated( charIDToTypeID('Chnl'), charIDToTypeID('Ordn'), charIDToTypeID('Trgt') );    desc523.putReference( charIDToTypeID('null'), ref325 );    executeAction( charIDToTypeID('Dlt '), desc523, DialogModes.NO );};function makeLayerMask(maskType) {if( maskType == undefined) maskType = 'RvlS' ; //from selection//requires a selection 'RvlS'  complete mask 'RvlA' otherThanSelection 'HdSl'    var desc140 =new ActionDescriptor();    desc140.putClass( charIDToTypeID('Nw  '), charIDToTypeID('Chnl') );        var ref51 = new ActionReference();        ref51.putEnumerated( charIDToTypeID('Chnl'), charIDToTypeID('Chnl'), charIDToTypeID('Msk ') );    desc140.putReference( charIDToTypeID('At  '), ref51 );    desc140.putEnumerated( charIDToTypeID('Usng'), charIDToTypeID('UsrM'), charIDToTypeID(maskType) );    executeAction( charIDToTypeID('Mk  '), desc140, DialogModes.NO );}